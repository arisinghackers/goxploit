// Code generated by goxploit msfrpc LibraryGenerator. DO NOT EDIT.

package metasploit

import (
	"errors"
	"github.com/arisinghackers/goxploit/pkg/msfrpc"
)

type Module struct {
	*msfrpc.MsfRpcClient
}

func NewModule(client *msfrpc.MsfRpcClient) *Module {
	return &Module{client}
}

func (c *Module) Exploits(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.exploits", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Auxiliary(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.auxiliary", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Post(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.post", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Payloads(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.payloads", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Encoders(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.encoders", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Nops(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.nops", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Info(token string, ModuleType string, ModuleName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.info", c.Token, ModuleType, ModuleName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Options(token string, ModuleType string, ModuleName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.options", c.Token, ModuleType, ModuleName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) CompatiblePayloads(token string, ModuleName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.compatible_payloads", c.Token, ModuleName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) TargetCompatiblePayloads(token string, ModuleName string, SessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.target_compatible_payloads", c.Token, ModuleName, SessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) CompatibleSessions(token string, ModuleName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.compatible_sessions", c.Token, ModuleName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Encode(token string, Data string, EncoderModule string, Options string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.encode", c.Token, Data, EncoderModule, Options})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Module) Execute(token string, ModuleType string, ModuleName string, Options string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"module.execute", c.Token, ModuleType, ModuleName, Options})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

