// Code generated by goxploit msfrpc LibraryGenerator. DO NOT EDIT.

package metasploit

import (
	"errors"
	"github.com/arisinghackers/goxploit/pkg/msfrpc"
)

type Session struct {
	*msfrpc.MsfRpcClient
}

func NewSession(client *msfrpc.MsfRpcClient) *Session {
	return &Session{client}
}

func (c *Session) List(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.list", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) Stop(token string, sessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.stop", c.Token, sessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) ShellRead(token string, sessionId string, ReadPointer string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.shell_read", c.Token, sessionId, ReadPointer})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) ShellWrite(token string, sessionId string, InputCommand string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.shell_write", c.Token, sessionId, InputCommand})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) MeterpreterWrite(token string, sessionId string, ps string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.meterpreter_write", c.Token, sessionId, ps})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) MeterpreterRead(token string, sessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.meterpreter_read", c.Token, sessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) MeterpreterRunSingle(token string, sessionId string, ps string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.meterpreter_run_single", c.Token, sessionId, ps})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) MeterpreterScript(token string, sessionId string, scriptName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.meterpreter_script", c.Token, sessionId, scriptName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) MeterpreterSessionDetach(token string, sessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.meterpreter_session_detach", c.Token, sessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) MeterpreterTabs(token string, sessionId string, InputLine string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.meterpreter_tabs", c.Token, sessionId, InputLine})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) CompatibleModules(token string, sessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.compatible_modules", c.Token, sessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) ShellUpgrade(token string, sessionId string, IpAddress string, Port string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.shell_upgrade", c.Token, sessionId, IpAddress, Port})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) RingClear(token string, sessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.ring_clear", c.Token, sessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) RingLast(token string, sessionId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.ring_last", c.Token, sessionId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Session) RingPut(token string, sessionId string, InputCommand string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"session.ring_put", c.Token, sessionId, InputCommand})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

