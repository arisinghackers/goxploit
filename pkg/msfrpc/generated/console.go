// Code generated by goxploit msfrpc LibraryGenerator. DO NOT EDIT.

package metasploit

import (
	"errors"
	"github.com/arisinghackers/goxploit/pkg/msfrpc"
)

type Console struct {
	*msfrpc.MsfRpcClient
}

func NewConsole(client *msfrpc.MsfRpcClient) *Console {
	return &Console{client}
}

func (c *Console) Create(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.create", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) Destroy(token string, consoleId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.destroy", c.Token, consoleId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) List(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.list", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) Write(token string, ConsoleId string, InputCommand string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.write", c.Token, ConsoleId, InputCommand})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) Read(token string, ConsoleId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.read", c.Token, ConsoleId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) SessionDetach(token string, consoleId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.session_detach", c.Token, consoleId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) SessionKill(token string, consoleId string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.session_kill", c.Token, consoleId})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Console) Tabs(token string, consoleId string, InputLine string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"console.tabs", c.Token, consoleId, InputLine})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

