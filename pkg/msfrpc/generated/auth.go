// Code generated by goxploit msfrpc LibraryGenerator. DO NOT EDIT.

package metasploit

import (
	"errors"
	"github.com/arisinghackers/goxploit/pkg/msfrpc"
)

type Auth struct {
	*msfrpc.MsfRpcClient
}

func NewAuth(client *msfrpc.MsfRpcClient) *Auth {
	return &Auth{client}
}

func (c *Auth) Login(userName string, userPassword string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"auth.login", userName, userPassword})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Auth) Logout(token string, LogoutToken string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"auth.logout", c.Token, LogoutToken})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Auth) TokenAdd(token string, NewToken string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"auth.token_add", c.Token, NewToken})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Auth) TokenGenerate(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"auth.token_generate", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Auth) TokenList(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"auth.token_list", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Auth) TokenRemove(token string, TokenToBeRemoved string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"auth.token_remove", c.Token, TokenToBeRemoved})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

