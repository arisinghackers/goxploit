// Code generated by goxploit msfrpc LibraryGenerator. DO NOT EDIT.

package metasploit

import (
	"errors"
	"github.com/arisinghackers/goxploit/pkg/msfrpc"
)

type Core struct {
	*msfrpc.MsfRpcClient
}

func NewCore(client *msfrpc.MsfRpcClient) *Core {
	return &Core{client}
}

func (c *Core) AddModulePath(token string, Path string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.add_module_path", c.Token, Path})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) ModuleStats(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.module_stats", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) ReloadModules(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.reload_modules", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) Save(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.save", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) Setg(token string, OptionName string, OptionValue string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.setg", c.Token, OptionName, OptionValue})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) Unsetg(token string, OptionName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.unsetg", c.Token, OptionName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) ThreadList(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.thread_list", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) ThreadKill(token string, ThreadID string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.thread_kill", c.Token, ThreadID})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) Version(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.version", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Core) Stop(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"core.stop", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

