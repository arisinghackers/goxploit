// Code generated by goxploit msfrpc LibraryGenerator. DO NOT EDIT.

package metasploit

import (
	"errors"
	"github.com/arisinghackers/goxploit/pkg/msfrpc"
)

type Plugin struct {
	*msfrpc.MsfRpcClient
}

func NewPlugin(client *msfrpc.MsfRpcClient) *Plugin {
	return &Plugin{client}
}

func (c *Plugin) Load(token string, PluginName string, Options string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"plugin.load", c.Token, PluginName, Options})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Plugin) Unload(token string, PluginName string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"plugin.unload", c.Token, PluginName})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

func (c *Plugin) Loaded(token string) (map[string]interface{}, error) {
	resp, err := c.MsfRequest([]interface{}{"plugin.loaded", c.Token})
	if err != nil {
		return nil, err
	}
	if result, ok := resp["result"]; ok && result == "failure" {
		return nil, errors.New("Unprocessable Content")
	}
	if errMsg, ok := resp["error_message"]; ok {
		return nil, errors.New(errMsg.(string))
	}
	return resp, nil
}

